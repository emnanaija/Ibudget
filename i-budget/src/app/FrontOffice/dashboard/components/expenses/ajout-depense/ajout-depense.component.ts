import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { DepensesService } from '../../../../../services/depenses/depenses.service';
import { HttpClientModule } from '@angular/common/http';
import { ExpenseCategory } from '../../../../../Models/depenses/expense-category.model';  
import { ExpenseCategoryService } from '../../../../../services/expense_category/expense-category.service';
import { Depense, Category } from '../../../../../Models/depenses/depense.model';

@Component({
  selector: 'app-ajout-depense',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, FormsModule, HttpClientModule],
  templateUrl: './ajout-depense.component.html',
  styleUrls: ['./ajout-depense.component.css']
})
export class AjoutDepenseComponent implements OnInit {
  mode: 'manuel' | 'image' = 'manuel';
  depenseForm: FormGroup;
  categories: ExpenseCategory[] = [];
  selectedFile?: File;
  uploadResult: string = '';
  successMessage: string = ''; // Variable pour afficher un message de succ√®s
  errorMessage: string = '';   // Variable pour afficher un message d'erreur
  
  // Propri√©t√©s pour la liste des d√©penses
  recentExpenses: Depense[] = [];
  isLoading: boolean = false;

  constructor(
    private fb: FormBuilder, 
    private depenseService: DepensesService,
    private categoryService: ExpenseCategoryService // Injection du service pour r√©cup√©rer les cat√©gories
  ) {
    this.depenseForm = this.fb.group({
      montant: ['', [Validators.required, Validators.min(10)]],
      date: ['', Validators.required],
      etat: ['REALISEE', Validators.required],
      category: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.loadCategories();
    this.loadRecentExpenses();
  }

  loadCategories(): void {
    this.categoryService.getAllCategories().subscribe({
      next: (data) => {
        this.categories = data;
      },
      error: (err) => {
        console.error('Erreur lors du chargement des cat√©gories', err);
        this.errorMessage = "Erreur lors du chargement des cat√©gories.";
      }
    });
  }

  // Charger les d√©penses r√©centes
  loadRecentExpenses(): void {
    this.isLoading = true;
    this.depenseService.getDepenses().subscribe({
      next: (depenses) => {
        // Trier les d√©penses par date (les plus r√©centes d'abord)
        this.recentExpenses = depenses
          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
          .slice(0, 5); // Limiter √† 5 d√©penses
        this.isLoading = false;
      },
      error: (err) => {
        console.error('Erreur lors du chargement des d√©penses r√©centes', err);
        this.isLoading = false;
      }
    });
  }

  // Obtenir le nom de la cat√©gorie (pour g√©rer √† la fois les objets et les IDs)
  getCategoryName(category: any): string {
    if (!category) return 'Non cat√©goris√©';
    
    if (typeof category === 'object' && category.nom) {
      return category.nom;
    }
    
    if (typeof category === 'number' || typeof category === 'string') {
      const foundCategory = this.categories.find(c => c.id === Number(category));
      return foundCategory ? foundCategory.nom : `Cat√©gorie #${category}`;
    }
    
    return 'Non cat√©goris√©';
  }

  onFileSelected(event: any) {
    this.selectedFile = event.target.files[0];
  }

  submitManuel() {
    if (this.depenseForm.valid) {
      const depenseData = this.depenseForm.value;
  
      console.log('Donn√©es du formulaire avant modification:', depenseData); // Log des donn√©es du formulaire
  
      // Assurez-vous que l'ID de la cat√©gorie est un nombre
      const selectedCategoryId = Number(depenseData.category);
const selectedCategory = this.categories.find(c => c.id === selectedCategoryId);

  
     // console.log('Cat√©gorie trouv√©e :', selectedCategory); // Affiche la cat√©gorie trouv√©e
  
      if (!selectedCategory) {
        this.errorMessage = 'Cat√©gorie non valide';
      //  console.error('Cat√©gorie non trouv√©e dans la liste:', depenseData.category);
        return;
      }
  
      // Ajoute l'objet complet de la cat√©gorie dans depenseData
      depenseData.category = selectedCategory; // On envoie l'objet complet tel qu‚Äôil a √©t√© charg√©
      depenseData.wallet = { id: 1 }; // Remplace 1 par l‚ÄôID du wallet courant de l‚Äôutilisateur

      console.log('Objet depenseData envoy√©:', depenseData); // Affiche les donn√©es avant l'envoi
  
      // Ensuite, envoie la requ√™te pour ajouter la d√©pense
      this.depenseService.createDepense(depenseData).subscribe({
        next: (response) => {
          console.log('R√©ponse du serveur :', response); // Affiche la r√©ponse du serveur
          this.successMessage = 'D√©pense ajout√©e avec succ√®s üéâ';
          this.depenseForm.reset({
            etat: 'REALISEE'  // R√©initialiser le formulaire avec la valeur par d√©faut pour etat
          });
          // Recharger les d√©penses r√©centes apr√®s un ajout r√©ussi
          this.loadRecentExpenses();
        },
        error: (err) => {
          this.errorMessage = 'Erreur lors de l\'ajout';
          console.error("Erreur lors de l'ajout", err); // Affiche l'erreur re√ßue du serveur
        }
      });
    } else {
      // V√©rifier si l'erreur vient du montant
      if (this.depenseForm.get('montant')?.hasError('min')) {
        this.errorMessage = 'Le montant doit √™tre d\'au moins 10';
      } else {
        this.errorMessage = 'Formulaire invalide';
      }
      console.log('Le formulaire est invalide :', this.depenseForm.value);
    }
  }

  submitImage() {
    if (this.selectedFile) {
      this.depenseService.uploadDepenseImage(this.selectedFile).subscribe({
        next: (result) => {
          this.uploadResult = result;
          this.successMessage = 'Image envoy√©e ‚úÖ, texte extrait : ' + result;
          setTimeout(() => this.successMessage = '', 3000); // Effacer le message apr√®s 3 secondes
          
          // Recharger les d√©penses r√©centes apr√®s un ajout r√©ussi via image
          this.loadRecentExpenses();
        },
        error: (err) => {
          console.error("Erreur lors de l'envoi de l'image", err);
          this.errorMessage = "Erreur lors de l'envoi de l'image. Veuillez r√©essayer.";
          setTimeout(() => this.errorMessage = '', 3000); // Effacer le message apr√®s 3 secondes
        }
      });
    }
  }
}